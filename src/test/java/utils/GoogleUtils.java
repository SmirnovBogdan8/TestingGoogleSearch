package utils;

import com.codeborne.selenide.Selenide;
import com.codeborne.selenide.Screenshots;
import org.junit.jupiter.api.Assertions;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static com.codeborne.selenide.Selenide.$;

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –∏ –∫–∞–ø—á–µ–π.
 */
public class GoogleUtils {
    private static final String SCREENSHOTS_DIR = "build/reports/tests/screenshots/";
    private static final int DEFAULT_WAIT_TIMEOUT = 3000;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.
     * –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     */
    public static void initScreenshotsDir() {
        new File(SCREENSHOTS_DIR).mkdirs();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º.
     *
     * @param name –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
     * @throws RuntimeException –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
     */
    public static void takeScreenshot(String name) {
        try {
            File screenshot = Screenshots.takeScreenShotAsFile();
            File targetFile = new File(SCREENSHOTS_DIR + name + "_" + System.currentTimeMillis() + ".png");
            Assertions.assertNotNull(screenshot, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç");
            Files.copy(screenshot.toPath(), targetFile.toPath());
            System.out.println("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + targetFile.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: " + e.getMessage());
            throw new RuntimeException("Failed to save screenshot", e);
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (3000 –º—Å).
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞—É–∑—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
     */
    public static void waitDefault() {
        Selenide.sleep(DEFAULT_WAIT_TIMEOUT);
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.
     *
     * @param milliseconds –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    public static void wait(int milliseconds) {
        Selenide.sleep(milliseconds);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–π–¥–µ–Ω–∞ –ª–∏ –∫–∞–ø—á–∞, –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
     * –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
     *
     * @throws AssertionError –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
     *                        –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
     */
    public static void verifyCaptchaPassed() {
        boolean captchaShown = false;
        int maxAttempts = 10;
        int attempt = 0;

        while (attempt < maxAttempts) {
            attempt++;

            if ($("#captcha-form").exists() || $("iframe[src*='recaptcha']").exists()) {
                if (!captchaShown) {
                    System.out.println("‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.");
                    captchaShown = true;
                }
                wait(5000);
            }
            else if ($("#rso").exists()) {
                System.out.println("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ (–∏–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ). –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
                return;
            }
            else {
                System.out.println("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
                wait(3000);
            }
        }

        Assertions.fail("‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å");
    }
}